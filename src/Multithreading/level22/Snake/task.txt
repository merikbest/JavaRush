
========================================================================================================================
    Змейка(1)
========================================================================================================================

Для этого нам понадобятся:
а) собственно сама змея (класс Snake)
б) комната, в которой она будет ползать (класс Room)
в) мыши, которых она будет есть (класс Mouse)

Создай классы Snake, Room, Mouse

Не забудь создать метод public static void main(String[] args) в классе Room.

Требования:
•	Класс Snake должен быть создан в отдельном файле.
•	Класс Room должен быть создан в отдельном файле.
•	Класс Mouse должен быть создан в отдельном файле.
•	Класс Room должен содержать корректно объявленный метод main.


========================================================================================================================
    Змейка(2)
========================================================================================================================

Теперь самое интересное - как будет устроена змея.

Что можно сказать о змее:
а) По сути - змея это набор кусочков - клеточек. Но точно известно, что один из них - голова.
б) У змеи есть направление движения.

Так что нам еще понадобятся классы:
SnakeSection - кусочек змеи.
SnakeDirection - класс (enum) будет описывать направление движения змеи.

Создай классы SnakeSection и SnakeDirection.

Требования:
•	Класс SnakeSection должен быть создан в отдельном файле.
•	Перечисление(enum) SnakeDirection должно быть создано в отдельном файле.


========================================================================================================================
    Змейка(3)
========================================================================================================================

Отлично. Я еще добавил класс KeyboardObserver на будущее.
Изучи его внимательно. Пригодится.

Начнем с самого простого - класса Mouse.
Мышь не будет двигаться и у нее будут только координаты и все.
Добавь два приватных поля в класс Mouse: x и y типа int.

Требования:
•	Внимательно изучи класс KeyboardObserver.
•	В классе Mouse должно существовать поле x типа int, доступ к которому разрешен только в пределах этого класса.
•	В классе Mouse должно существовать поле y типа int, доступ к которому разрешен только в пределах этого класса.


========================================================================================================================
    Змейка(4)
========================================================================================================================

Координаты x и y ты уже создал в классе Mouse, а как получить к ним доступ?
Создай корректные геттеры для этих полей и конструктор с двумя параметрами типа int (x и y соответственно).

Требования:
•	В классе Mouse должен быть создан корректный геттер для поля x.
•	В классе Mouse должен быть создан корректный геттер для поля y.
•	В классе Mouse должен быть создан корректно работающий публичный конструктор с двумя параметрами типа int.


========================================================================================================================
    Змейка(5)
========================================================================================================================

Теперь доделаем enum SnakeDirection так, чтобы он содержал возможные направления движения змейки.

Добавь 4 значения UP, DOWN, LEFT, RIGHT.

Должно получиться примерно так:
public enum SnakeDirection
{
 UP,
 RIGHT,
 DOWN,
 LEFT
}

Требования:
•	SnakeDirection должен содержать элемент UP.
•	SnakeDirection должен содержать элемент DOWN.
•	SnakeDirection должен содержать элемент RIGHT.
•	SnakeDirection должен содержать элемент LEFT.


  ========================================================================================================================
    Змейка(6)
========================================================================================================================

Теперь займемся классом SnakeSection.
Он будет описывать один кусочек змеи.

А у каждого кусочка что есть?
Правильно! Координаты.

Добавь два поля в класс SnakeSection: x и y типа int.
Добавь для них getter'ы и конструктор с двумя параметрами типа int.

Требования:
•	В классе SnakeSection должно существовать поле x типа int, доступ к которому разрешен только в пределах этого класса.
•	В классе SnakeSection должно существовать поле y типа int, доступ к которому разрешен только в пределах этого класса.
•	В классе SnakeSection должен быть создан корректный геттер для поля x.
•	В классе SnakeSection должен быть создан корректный геттер для поля y.
•	В классе SnakeSection должен быть создан корректно работающий публичный конструктор с двумя параметрами типа int.


  ========================================================================================================================
    Змейка(7)
  ========================================================================================================================

"Кусочки змеи" мы описали, теперь займемся самой змеей.

У змеи должен быть список кусочков (SnakeSection) и голова.
Пусть головой будет просто самый первый кусочек (с номером 0).

У змеи также есть направление движения - сторона, куда она движется по умолчанию.
А еще есть состояние - жива змея или мертва.
Игра заканчивается тогда, когда змея мертва.

Надо:
а) Добавить в класс Snake поле sections типа List<SnakeSection>.
б) Добавить поле isAlive типа boolean.
в) Добавить поле direction типа SnakeDirection.
г) Для всех полей добавить getter'ы, а для direction еще и setter.

Примечание:
Для полей логического типа геттер принято писать не как getValue(), а как isValue() - это улучшает читабельность кода.
Только не пиши isIsAlive(). Одного is будет вполне достаточно.

Примечание 2:
Все поля создаваемые в этом задании должны быть приватными, а методы - публичными.

Требования:
•	В классе Snake должно быть объявлено поле sections типа List<SnakeSection>.
•	В классе Snake должно быть объявлено поле isAlive типа boolean.
•	В классе Snake должно быть объявлено поле direction типа SnakeDirection.
•	В классе Snake должен быть создан корректный геттер для поля sections.
•	В классе Snake должен быть создан корректный геттер для поля isAlive.
•	В классе Snake должен быть создан корректный геттер для поля direction.
•	В классе Snake должен быть создан корректный сеттер для поля direction.
•	Все поля класса Snake должны быть объявлены с модификатором доступа private.
•	Все методы класса Snake должны быть объявлены с модификатором доступа public.


  ========================================================================================================================
    Змейка(8)
  ========================================================================================================================

Настала очередь конструктора класса Snake.

Змея у нас будет поначалу состоять из одного кусочка - головы.
А что для него требуется?
Что необходимо передать в конструктор?
Координаты змеи, конечно же.

Надо:
а) Передать в конструктор координаты головы змеи (x и y).
б) создать в нем первый "кусочек змеи" (голову) и добавить его в коллекцию sections (ArrayList).
в) isAlive выставить в true.
г) не забудь в конструкторе инициализировать переменную sections. В null не много-то и добавишь!
д) создать и реализовать метод int getX(). Метод должен вернуть координату Х головы змеи.
е) создать и реализовать метод int getY(). Метод должен вернуть координату Y головы змеи.
ж) еще добавить классу метод move()- он нам пригодится попозже.
з) созданный конструктор должен быть публичным.

Требования:
•	В классе Snake должен быть создан корректно работающий public конструктор (согласно условию задачи) с двумя параметрами типа int.
•	В классе Snake должен быть создан метод getX() без параметров, возвращающий координату x нулевого элемента списка sections.
•	В классе Snake должен быть создан метод getY() без параметров, возвращающий координату y нулевого элемента списка sections.
•	В классе Snake должен быть создан метод move.


  ========================================================================================================================
    Змейка(9)
  ========================================================================================================================

Еще остался самый главный класс - Room.
Что нам нужно для его описания?
Размеры комнаты (width и height) - раз.
Змея - два
Мышь - три.

Надо:
а) создать в классе Room переменные width и height типа int.
б) создать в классе Room переменную snake типа Snake.
в) создать в классе Room переменную mouse типа Snake. Шучу. Типа Mouse, конечно же :).
г) создать для них всех геттеры и сеттеры.
д) создать конструктор. Конструктор должен принимать три параметра: width, height и ... snake!

Требования:
•	В классе Room должна быть создана приватная переменная width типа int.
•	В классе Room должна быть создана приватная переменная height типа int.
•	В классе Room должна быть создана приватная переменная snake типа Snake.
•	В классе Room должна быть создана приватная переменная mouse типа Mouse.
•	В классе Room должен быть создан корректный публичный геттер для поля width.
•	В классе Room должен быть создан корректный публичный геттер для поля height.
•	В классе Room должен быть создан корректный публичный геттер для поля snake.
•	В классе Room должен быть создан корректный публичный геттер для поля mouse.
•	В классе Room должен быть создан корректный публичный сеттер для поля width.
•	В классе Room должен быть создан корректный публичный сеттер для поля height.
•	В классе Room должен быть создан корректный публичный сеттер для поля snake.
•	В классе Room должен быть создан корректный публичный сеттер для поля mouse.
•	В классе Room должен быть создан корректный публичный конструктор с параметрами int, int и Snake(width, height и snake).


  ========================================================================================================================
    Змейка(10)
  ========================================================================================================================

Займемся методом main.

Для начала надо создать в классе Room статическое поле game типа Room. Доступ к переменной должен быть из всех классов.

Затем в методе main:
а) Создать змею - объект типа Snake.
б) Создать комнату - объект типа Room и передать в него ширину, высоту и змею.
в) Установить змее direction равным SnakeDirection.DOWN

Чего еще не хватает? Собственно метода, в котором будет идти вся игровая логика.
И еще нужен метод, который бы отрисовывал все это на экране:
а) создать метод void run()
б) создать метод void print()

Требования:
•	В методе main класса Room должна быть создана новая змея(объект типа Snake).
•	В методе main класса Room должно быть инициализировано поле game.
•	В методе main класса Room направление движения змеи должно быть установлено равным SnakeDirection.DOWN.
•	В классе Room должен быть создан метод run(), тип возвращаемого значения void.
•	В классе Room должен быть создан метод print(), тип возвращаемого значения void.
•	В классе Room должно быть создано статическое неприватное поле game типа Room.


  ========================================================================================================================
    Змейка(11)
  ========================================================================================================================

Теперь логика управления мышью.

С мышью у нас будут происходить две вещи.

Первая - змея съедает мышь.

Вторая - появляется новая мышь в случайной точке комнаты.

Надо написать и реализовать метод createMouse() в классе Room.

В этом методе мы просто должны создавать новую мышь со случайными координатами в комнате.

Как получить случайные координаты?

Это ты уже должен был знать. На всякий случай даю подсказку:

int x = (int) (Math.random() * width);
Еще понадобится метод - eatMouse(), на случай, если мышь все-таки кто-то съест :)

Пока сложной логики в этом методе не будет - просто будем вызывать метод createMouse и все.

Требования:
•	В классе Room должен быть создан метод createMouse.
•	В методе createMouse должна быть создана новая мышь по правилам описанным в условии и сохранена в поле mouse.
•	В классе Room должен быть создан метод eatMouse.
•	В методе eatMouse должен содержаться вызов метода createMouse.
2


  ========================================================================================================================
    Змейка(12)
  ========================================================================================================================

Змея у нас есть, пусть и мышь будет.

Добавить в метод main:
a) вызов метода createMouse().
б) вызов метода run().
Без него ничего работать не будет. В нем вся основная логика.
Неплохо получилось, но я все-таки внесу пару правок.
Кстати, как насчет написать метод sleep?
Ты уже понял из предыдущих задач, что в методе run нужна пауза.
Но насколько я помню, скорость в змейке должна расти при росте ее длины.
Значит чем длиннее змея, тем выше скорость и меньше пауза.

Требования:
•	В методе main классе Room должен быть вызван метод createMouse на объекте типа Room.
•	В методе main классе Room должен быть вызван метод run на объекте типа Room.
•	В классе Room должен быть создан метод sleep без параметров.


  ========================================================================================================================
    Змейка(13)
  ========================================================================================================================

Предлагаю тебе в этот раз написать специальный метод sleep(), который будет делать паузу в зависимости от длины змеи
(количества элементов в sections).
Придумай какой-нибудь хитрый алгоритм. Чтобы на первом уровне пауза была 500 миллисекунд, к 11 уровню постепенно уменьшилась до 300.
А к 15 до 200. И дальше оставалась постоянной.

Требования:
•	Метод sleep должен вызывать метод Thread.sleep(500) в начале игры.
•	Метод sleep должен вызывать метод Thread.sleep(300) на 11 уровне.
•	Метод sleep должен вызывать метод Thread.sleep(200) для уровней больше 15.


  ========================================================================================================================
    Змейка(14)
  ========================================================================================================================

Теперь поработаем над методом print().

Надо:
а) вывести на экран прямоугольник из точек размером width x height.
б) тело змеи отметить символом "x"-английское
в) голову змеи нарисовать символом "X"-английское.

Подсказка:
а) удобно сначала создать матрицу типа int[][] с размером (height x width)
б) затем пройтись по всем объектам и отрисовать их в матрицу.
Например, тело змеи - 1, голова змеи - 2, мышь - 3.

Требования:
•	Метод print должен выводить данные на экран.
•	Метод print должен выводить на экран количество строк равное height.
•	Количество символов в каждой строке выведенной на экран должно быть равно width.
•	Голова змеи должна быть отмечена символом X.
•	Тело змеи должно быть отмечено символами x.
•	Мышь должна быть отмечена символом ^.


  ========================================================================================================================
Змейка(15)
  ========================================================================================================================

Теперь осталось допилить змею.

Вот что я предлагаю насчет движения змеи:
Змея состоит из кусочков. Давай каждый ход просто добавлять один кусочек со стороны головы, а самый последний - удалять.
Тогда получится, что змея ползет.

Давай добавим два метода move, один без параметров, а другой с двумя параметрами типа int.

В методе move без параметров необходимо:
а) прекратить движение если змея умерла (isAlive == false)
б) вызвать метод move(0, -1) если направление движения равно SnakeDirection.UP
в) вызвать метод move(1, 0) если направление движения равно SnakeDirection.RIGHT
г) вызвать метод move(0, 1) если направление движения равно SnakeDirection.DOWN
д) вызвать метод move(-1, 0) если направление движения равно SnakeDirection.LEFT

Метод move с параметрами int, int пока оставим пустым.

Требования:
•	В методе move без параметров должен быть вызван метод move(0, -1), если направление движения равно SnakeDirection.UP.
•	В методе move без параметров должен быть вызван метод move(1, 0), если направление движения равно SnakeDirection.RIGHT.
•	В методе move без параметров должен быть вызван метод move(0, 1), если направление движения равно SnakeDirection.DOWN.
•	В методе move без параметров должен быть вызван метод move(-1, 0), если направление движения равно SnakeDirection.LEFT.
•	Метод move с параметрами (int, int) не должен быть вызван, если змея умерла (isAlive == false).
•	В классе Snake должен быть создан метод move без параметров.
•	В классе Snake должен быть создан НЕ приватный метод move с параметрами int, int.


  ========================================================================================================================
    Змейка(16)
  ========================================================================================================================

Ничто не вечно. Так и змея должна умирать, если она врезается в стену или саму себя.

Для определения, не пересекается ли змея сама с собой, можно сделать очень простую проверку:
содержит ли список sections "новую голову змеи".

Код для этого будет выглядеть примерно так:
if (sections.contains(head))

При этом head должен быть еще не добавлен в список sections, иначе будет всегда true.
Но чтобы этот код работал, надо реализовать методы сравнения объектов (equals и hashCode) в классе SnakeSection.

Подсказка:
Используй Ctrl+O в Intellij IDEA для автоматической генерации методов equals и hashCode.

Задание:
а) реализуй методы equals и hashCode в классе SnakeSection.
б) реализуй метод checkBorders(SnakeSection head): если голова змеи за границами комнаты - змея умирает (isAlive = false)
в) реализуй метод checkBody(SnakeSection head): если голова змеи пересекается с ее телом - змея умирает (isAlive = false)

Требования:
•	В классе SnakeSection должен быть метод equals.
•	В классе SnakeSection должен быть метод hashCode.
•	В классе Snake должен быть реализован, в соответствии с условием, НЕ приватный метод checkBorders.
•	В классе Snake должен быть реализован, в соответствии с условием, НЕ приватный метод checkBody.


































