========================================================================================================================
Тетрис(1)
Давай напишем игру Тетрис!

Наш Тетрис будет состоять из двух вещей: поля из клеток и фигурки, которая падает.
Поэтому для начала создай три класса: Field(поле с клетками), Figure(фигура) и сам Tetris.

Также нам понадобится метод main в классе Tetris.

Требования:
•	Класс Field должен быть создан в отдельном файле.
•	Класс Figure должен быть создан в отдельном файле.
•	Класс Tetris должен быть создан в отдельном файле.
•	Класс Tetris должен содержать метод main.

========================================================================================================================

Тетрис(2)
Отлично!
Теперь добавь в класс Tetris два поля: field типа Field и figure типа Figure.

Требования:
•	Поле field типа Field должно быть создано в классе Tetris.
•	Поле figure типа Figure должно быть создано в классе Tetris.
•	Поле field должно быть объявлено с модификатором доступа private.
•	Поле figure должно быть объявлено с модификатором доступа private.

========================================================================================================================

Тетрис(3)
Поле есть, фигура есть, а как их получить?

Добавь геттеры для полей field и figure.

Требования:
•	В классе Tetris должен быть создан метод getField без параметров.
•	В классе Tetris должен быть создан метод getFigure без параметров.
•	Метод getField должен быть объявлен с самым широким типом доступа.
•	Метод getFigure должен быть объявлен с самым широким типом доступа.
•	Метод getField должен возвращать значение поля field.
•	Метод getFigure должен возвращать значение поля figure.

========================================================================================================================

Тетрис(4)
Так же еще нам понадобится пара методов.
Добавь в класс Tetris методы run() и step():

run() будет отвечать за всю игру.
А step() - за один шаг в игре.

Тип возвращаемого значения void для обоих методов.
Тут и в будущем, если нет явных указаний с каким модификатором доступа создавать метод, то он должен быть публичным, а поле приватным.
*В общем случае, стоит руководствоваться правилом использования наиболее строгого(из возможных) модификатора доступа.
*Т.е. если логика системы предполагает обращения к методу извне класса, мы не сможем сделать такой метод приватным.
*Но также нет никаких причин указывать уровень доступа public для методов которые будут использованы только в рамках пакета.
*Поначалу это кажется несущественным, но на самом деле это один из основополагающих принципов ООП.
*Учись сразу делать правильно!

Требования:
•	В классе Tetris должен быть создан метод run без параметров.
•	В классе Tetris должен быть создан метод step без параметров.
•	Метод run НЕ должен быть приватным.
•	Метод step НЕ должен быть приватным.
•	Метод run не должен возвращать значение.
•	Метод step не должен возвращать значение.

========================================================================================================================

Тетрис(5)
Теперь нужно создать объект самого Тетриса.
Добавь в класс Tetris статическое поле game типа Tetris.
Поле game НЕ должно быть приватным.

Затем в методе main создай объект типа Тетрис и сохрани его в эту переменную.
Затем добавь вызов метода run.

Требования:
•	В классе Tetris должно быть создано поле game.
•	Поле game НЕ должно быть приватным.
•	Поле game должно быть статическим.
•	Поле game должно быть типа Tetris.
•	В методе main поле game должно быть инициализировано новым объектом типа Tetris.
•	В методе main должен быть вызван метод run на объекте сохраненном в поле game.

========================================================================================================================

Тетрис(6)
Теперь перейдем к классу Field.
Он будет отвечать за хранение данных о текущих занятых и свободных клетках на поле игры.
Добавь в класс Field два поля поля: width (ширина) типа int, height(высота) типа int.
Так же нам понадобится матрица - двумерный массив: matrix(матрица) типа int[][];
Там же добавь getter'ы для созданных переменных.
Добавь конструктор с двумя параметрами width и height. И не забудь про матрицу.

ВАЖНО!
Двумерный массив можно представить как массив массивов или как прямоугольную матрицу.
При этом первой координатой в массиве у нас будет номер строки, а второй - столбца.
Другими словами ячейка с координатами x, y - это matrix[y][x].

Требования:
•	В классе Field должно быть создано приватное поле width типа int.
•	В классе Field должно быть создано приватное поле height типа int.
•	В классе Field должно быть создано приватное поле matrix типа int[][](целочисленный двумерный массив).
•	В классе Field должен быть создан корректный геттер для поля height.
•	В классе Field должен быть создан корректный геттер для поля width.
•	В классе Field должен быть создан корректный геттер для поля matrix.
•	В классе Field должен быть создан корректно работающий конструктор с параметрами int, int.
    Поле matrix должно быть инициализировано новым массивом размерностью [y][x] (height и width).

========================================================================================================================

Тетрис(7)
Нам понадобится еще 4 метода в классе Field:
а) print() - объект будет отрисовывать на экран свое текущее состояние;
б) removeFullLines() - будет удалять из матрицы полностью заполненные строки и сдвигать вышележащие строки вниз;
в) Integer getValue(int x, int y) - возвращает значение которое находится в матрице с координатами x и y;
г) void setValue(int x, int y, int value) - устанавливает переданное значение в ячейку массива (матрицы) с координатами x, y.

Требования:
•	В классе Field должен быть создан метод print без параметров.
•	В классе Field должен быть создан метод removeFullLines без параметров.
•	В классе Field должен быть создан метод getValue с двумя параметрами типа int.
•	В классе Field должен быть создан метод setValue c тремя параметрами типа int.
•	Метод print не должен возвращать значение.
•	Метод removeFullLines не должен возвращать значение.
•	Метод getValue должен возвращать значение типа Integer.
•	Метод setValue не должен возвращать значение.

========================================================================================================================

Тетрис(8)
Теперь создадим костяк класса Figure.
Этот класс будет описывать падающую фигурку.

Нам понадобятся ее координаты и форма.
За координаты будут отвечать две переменные x и y.
За форму - матрица. Двумерный массив 3×3, состоящий из единиц и нулей.
Единицей мы обозначаем что клетка есть, нулем - что она пустая.

Добавь в класс Figure два поля поля: x типа int, y типа int.
Еще добавь двумерный массив: matrix(матрица) типа int[][].
Там же добавь getter'ы для созданных переменных.
Добавь конструктор с тремя параметрами x, y, matrix.

Требования:
•	В классе Figure должно быть создано приватное поле x типа int.
•	В классе Figure должно быть создано приватное поле y типа int.
•	В классе Figure должно быть создано приватное поле matrix типа int[][](целочисленный двумерный массив).
•	В классе Figure должен быть создан корректный геттер для поля х.
•	В классе Figure должен быть создан корректный геттер для поля y.
•	В классе Figure должен быть создан корректный геттер для поля matrix.
•	В классе Figure должен быть создан корректно работающий public конструктор с тремя параметрами int, int и int[][] (x, y и matrix).
  
========================================================================================================================

Тетрис(9)
Если ты обратил внимание, мы пишем программу "сверху вниз".
Сначала решили, какие классы нам нужны. Затем - какие методы.
А потом уже начнем писать код этих методов.
Таким образом мы разбиваем большую задачу на множество маленьких.
Когда код всех методов будет готов, останется только проверить - так ли все работает, как должно быть.
И если надо - внести некоторые изменения.

Требования:
•	Пересмотри созданную структуру классов и обрати внимание на порядок написания программы.

========================================================================================================================

Тетрис(10)
Также нам понадобятся методы для управления фигуркой.

Добавь в класс Figure методы:
left() - для движения фигурки влево.
right() - для движения фигурки вправо.
down() - для движения фигурки вниз.
up() - для движения фигурки вверх.
rotate() - для поворота фигурки вокруг главной диагонали.
downMaximum() - падение фигурки в низ до дна.
boolean isCurrentPositionAvailable() - проверка - может ли фигурка быть помещена в текущую позицию. Для теста захардкодь результат в true, пока мы не реализовали логику.
landed() - вызывается, когда фигурка достигла дна или уперлась в другую фигурку
Все ее занятые клетки теперь должны добавиться в Field.

Требования:
•	В классе Figure должен быть создан метод left без параметров.
•	В классе Figure должен быть создан метод right без параметров.
•	В классе Figure должен быть создан метод down без параметров.
•	В классе Figure должен быть создан метод up без параметров.
•	В классе Figure должен быть создан метод rotate без параметров.
•	В классе Figure должен быть создан метод downMaximum без параметров.
•	В классе Figure должен быть создан метод isCurrentPositionAvailable без параметров.
•	В классе Figure должен быть создан метод landed без параметров.
•	Метод isCurrentPositionAvailable должен возвращать true.

========================================================================================================================

Тетрис(11)

Теперь создай класс FigureFactory.
С его помощью мы будем создавать фигуры различных форм.
Пока он будет содержать только один статический метод createRandomFigure:
static Figure createRandomFigure(int x,int y)

Требования:
•	Класс FigureFactory должен быть создан в отдельном файле.
•	В классе FigureFactory должен быть создан метод createRandomFigure с двумя параметрами типа int.
•	Метод createRandomFigure должен быть статическим.
•	Должна существовать возможность получить доступ к методу createRandomFigure извне класса FigureFactory.
•	Метод createRandomFigure должен иметь тип возвращаемого значения Figure.

========================================================================================================================

Тетрис(12)

В тетрисе мы управляем движением фигурки с помощью клавиатуры.

Тут есть 4 действия:
движение влево (кнопка влево)
движение вправо (кнопка вправо)
поворот фигурки (цифра 5 на доп.клавиатуре справа)
падение вниз (пробел)

Мы будем обрабатывать ввод с клавиатуры в методе run() класса Tetris.

И тут у меня для тебя две новости: хорошая и плохая
Плохая новость состоит в том, что java не позволяет считать нажатые символы с клавиатуры,
пока пользователь не нажмет enter.
Не очень удобно, правда?

Хорошая новость состоит в том, что я написал специальный класс (KeyboardObserver), который позволяет обойти это ограничение.
Так что ты можешь воспользоваться им.

Есть еще и отличная новость.
Ты до сих пор отлично справлялся, поэтому я помогу тебе немного.
Я написал за тебя методы:
а) createRandomFigure в FigureFactory
б) run в Tetris

Изучи их внимательно и переходи дальше.

Требования:
•	Внимательно изучи метод run в классе Tetris.
•	Внимательно изучи метод createRandomFigure в классе FigureFactory.
•	Внимательно изучи класс KeyboardObserver.

========================================================================================================================

Тетрис(13)

Теперь приступим к реализации созданных методов.
Напиши реализацию метода print в классе Field
а) Метод должен выводить на экран прямоугольник состоящий из символов '.' и 'X'.
б) Высота прямоугольника равна height, ширина - width
в) Если данная клетка пустая - вывести точку, если не пустая - английский X

Подсказка:
if (matrix[y][x]==0) ...

Требования:
•	Метод print должен выводить данные на экран.
•	Метод print должен выводить на экран количество строк равное height.
•	Количество символов в каждой строке выведенной на экран должно быть равно width.
•	В случае, если элемент массива равен 0 - на экран должна быть выведена точка, иначе - английский X.

========================================================================================================================

Тетрис(14)

Напиши реализацию метода removeFullLines в классе Field.
Надо:
а) удалить все строки из матрицы, которые полностью заполнены (состоят из одних единиц);
б) сместить оставшиеся строки вниз;
в) создать новые строки взамен отсутствующих.

ВАЖНО!
matrix[y][x] содержит элемент с координатами (x,y).
matrix[i] содержит i-ю строку.
Мы можем:
а) удалить стоку:
matrix[i] = null
б) скопировать [ссылку на] строку:
matrix[i+1] = matrix[i];
в) создать новую строку:
matrix[i] = new int[width];

Требования:
•	После выполнения метода removeFullLines в массиве matrix не должно остаться строк состоящих из одних единиц.
•	Оставшиеся строки должны быть корректно перемещены, а вместо отсутствующих добавлены новые.

========================================================================================================================

Тетрис(15)

Напиши реализацию метода step в классе Tetris.
В методе надо переместить фигурку вниз на один шаг.

Если после перемещения положить фигурку на текущее место невозможно, то:
а) поднять ее обратно (up)
б) "приземлить" ее (landed)
в) удалить все "полные линии" в объекте field
г) создать новую фигурку взамен старой.

Требования:
•	В методе step класса Tetris необходимо переместить на 1 шаг вниз текущую фигуру.
•	В методе step класса Tetris необходимо вызвать метод up у текущей фигуры, если ее дальнейшее перемещение невозможно.
•	В методе step класса Tetris необходимо вызвать метод landed у текущей фигуры, если ее дальнейшее перемещение невозможно.
•	В методе step класса Tetris необходимо удалить все полные строки, если дальнейшее перемещение текущей фигуры невозможно.
•	В методе step класса Tetris необходимо создать новую случайную фигуру(метод createRandomFigure) и сохранить ее в поле figure,
    если дальнейшее перемещение текущей фигуры невозможно.

========================================================================================================================

Тетрис(16)

Напиши свою реализацию методов left(), right(), up(), down() в классе Figure.
Подумай, что должны делать эти методы?

Требования:
•	Метод left() должен уменьшать значение поля x на единицу, если это возможно(не нарушены границы игрового поля).
•	Метод right() должен увеличивать значение поля x на единицу, если это возможно(не нарушены границы игрового поля).
•	Метод up() должен уменьшать значение поля y на единицу.
•	Метод down() должен увеличивать значение поля y на единицу.














